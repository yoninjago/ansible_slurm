- name: "Install docker"
  hosts: docker
  become: true
  vars:
    packages:
      - python3
      - python3-pip
      - python3-setuptools
      - libselinux-python3
    pip_packages:
      - six
      - docker
      - requests
  tasks:
  - name: "create yum repository for docker"
    ansible.builtin.yum_repository:
      name: docker-repo
      description: "repo for docker"
      baseurl: "https://download.docker.com/linux/centos/7/x86_64/stable/"
      enabled: yes
      gpgcheck: no

  - name: "Install docker"
    ansible.builtin.yum:
      name: "docker-ce-18.09.1-3.el7.x86_64"
      state: present

  - name: "Install python and pip"
    ansible.builtin.yum:
      name: "{{ packages }}" # можно передавать списки, в те модули что их поддерживают, как правило это быстрее
      state: present
      update_cache: true


  - name: "Install docker sdk"
    pip:
     name: "{{ pip_packages }}"
    vars:
      ansible_python_interpreter: /usr/bin/python3

  - name: "Start docker service"
    service:
      name: "docker"
      state: started


- name: "Build container"
  hosts: build_host
  gather_facts: no
  become: true
  tags: build
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tasks:
    - name: "find docker directories"
      ansible.builtin.find:
        paths: ~/internal_ansible/Docker/files
        recurse: yes
        file_type: "directory" # найдем докер файлы для сборки на нашей локальной машине и положим в files
      delegate_to: 127.0.0.1
      register: files
      become: false

    - name: delete old directory
      file:
        path: /home/vagrant/dockerfiles
        state: absent

    - name: create build directory # пересоздадим директорию чтобы не оставлять мусора от сборки
      file:
        path: /home/vagrant/dockerfiles
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: "Copy files and build them"
      include_tasks: "container_assembly.yml" # включаем список тасок для создания контейнера, как мы уже делали в ролях
      loop: "{{ files.files }}" # include будет выполнен для каждого файла

- name: "Load container"
  hosts: runner_host
  gather_facts: no
  tags: load # ставим теги, которые помогут нам потом запустить таски/плеи с определенного места
  become: true
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tasks:
  - name: "find archive docker files"
    find:
      paths: ~/internal_ansible/Docker/files
      file_type: "file" # ищем файлы с образами чтобы их вгрузить
    delegate_to: 127.0.0.1
    register: files
    become: false

  - name: "Copy files and build them"
    include_tasks: "container_load.yml" # вгружаем каждый контейнер в целевую машину для запуска
    loop: "{{ files.files }}"

  - name: "Healthcheck"
    docker_host_info:
      containers: yes # проверяем что контейнеры запущены, собирая данные о них и сравнивая с референсом
    register: result
    until: result.host_info.ContainersRunning == files.files | length
    retries: 5 # выполняем пять раз, на случай если докер долго загружает контейнеры
    delay: 10
    tags: healthcheck
